# Triggered on every creation of a (non-draft) release.

# The release message must contain the LLVM version to build, in the format:
# llvm-project@sha or llvm-project@branch or llvm-project@tag

name: Build binary release

on:
    release:
        types: created

jobs:
    prepare:
        name: Preparation
        runs-on: ubuntu-latest
        steps:
            - name: Mark release as draft
              run: >
                  curl --fail --show-error -XPATCH
                  "-HAuthorization: Bearer ${{ secrets.GITHUB_TOKEN }}"
                  "https://api.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }}"
                  "-d" '{"draft": true}'

    build:
        name: Build
        runs-on: ubuntu-latest
        needs: prepare

        steps:
            - name: Checkout Dockerfile and scripts
              uses: actions/checkout@v4
              with:
                  ref: master

            - name: Get commit to build
              run: |
                  grep --max-count 1 --only-matching 'llvm-project@\S*' <<EOF | cut -f2 -d@ >LLVM_VERSION
                  ${{ github.event.release.body }}
                  EOF

            - name: Build artifacts
              run: make release LLVM_VERSION=$(cat LLVM_VERSION)

            - name: Get archive filename
              id: get-archive-name
              run: |
                  ARTIFACT_NAME=$(ls *.7z | head -1)
                  echo "::set-output name=artifact_name::${ARTIFACT_NAME}"


            - name: Upload release asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ github.event.release.upload_url }}
                  asset_path: ./${{ steps.get-archive-name.outputs.artifact_name }}
                  asset_name: ${{ steps.get-archive-name.outputs.artifact_name }}
                  asset_content_type: application/x-7z-compressed

    finalize:
        name: Finish
        runs-on: ubuntu-latest
        needs: build

        steps:
            - name: Publish release
              run: >
                  curl --fail --show-error -XPATCH
                  "-HAuthorization: Bearer ${{ secrets.GITHUB_TOKEN }}"
                  "https://api.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }}"
                  "-d" '{"draft": false}'
